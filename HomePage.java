import java.awt.Color;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author tktserapio
 */
public class HomePage extends javax.swing.JFrame {

    /**
     * Creates new form HomePage
     */
    // checks if the table already exists 
    public static boolean doesTableExist(String tableName, Connection con) 
        throws SQLException {
        DatabaseMetaData meta = con.getMetaData();
        ResultSet result = meta.getTables(null, null, tableName.toUpperCase(), null);
        
        return result.next();
    }
    
    public HomePage() {
        initComponents();
    }
    
    public HomePage(String username) {
        initComponents();
        
        labelUser.setText(username);
        
        String tableName = labelUser.getText();
        
        try 
        {
            // creating database and establishing a new connection 
            String databaseURL = "jdbc:derby:winterproject2;create=true";
            Connection con = DriverManager.getConnection(databaseURL);
            Statement st = con.createStatement();
            
            // checks if the table being created already exists 
            if (!doesTableExist(tableName, con)) {
                String sql = "create table" + " " + tableName + "(id int, firstname varchar(128), lastname varchar(128), prof varchar(128), age int)";
                st.execute(sql);
            }
            
            con.close(); 
            
            updateJTable();
        }
        
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        homeTable = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        comboSearch = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        comboSort = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        btnAscend = new javax.swing.JButton();
        btnDescend = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnAddNew = new javax.swing.JButton();
        btnDeleteAll = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        labelUser = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(253, 253, 253));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setEnabled(false);
        jScrollPane1.setFocusable(false);

        homeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name", "Profession", "Age"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(homeTable);

        comboSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "First Name", "Last Name", "Profession", "Age" }));

        btnSearch.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        btnSearch.setText("üîç");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnRefresh.setText("‚Üª");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        comboSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "First Name", "Last Name", "Profession", "Age" }));

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel7.setText("Sort by:");

        btnAscend.setText("‚ñ≤");
        btnAscend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAscendActionPerformed(evt);
            }
        });

        btnDescend.setText("‚ñº");
        btnDescend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescendActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel8.setText("What are you looking for?");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel2.setText("Category");

        btnDelete.setBackground(new java.awt.Color(23, 120, 240));
        btnDelete.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(23, 120, 240));
        btnUpdate.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAddNew.setBackground(new java.awt.Color(23, 120, 240));
        btnAddNew.setForeground(new java.awt.Color(255, 255, 255));
        btnAddNew.setText("Add New");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnDeleteAll.setBackground(new java.awt.Color(23, 120, 240));
        btnDeleteAll.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        btnDeleteAll.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteAll.setText("Delete All");
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(comboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSearch)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnRefresh)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAddNew, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAscend)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDescend)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(16, 16, 16))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddNew)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch)
                            .addComponent(comboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch)
                            .addComponent(btnRefresh))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAscend)
                    .addComponent(btnDescend)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteAll)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(23, 120, 240));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/person_icon.png"))); // NOI18N

        labelUser.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        labelUser.setForeground(new java.awt.Color(255, 255, 255));
        labelUser.setText("Username");

        btnLogout.setBackground(new java.awt.Color(66, 183, 41));
        btnLogout.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(255, 255, 255));
        btnLogout.setText("Log Out");
        btnLogout.setBorder(null);
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("employeeDB");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelUser, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    // SORT FUNCTION
    
    // if ascend button clicked (for sorting)
    private void btnAscendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAscendActionPerformed
        try {
            
            String databaseURL = "jdbc:derby:winterproject2";
            Connection con = DriverManager.getConnection(databaseURL);
            Statement st = con.createStatement();
            String tableName = labelUser.getText();
            
            String sql = "select * from " + tableName;
            
            ResultSet rs2 = st.executeQuery(sql);
            if (rs2.next() == false) {
                JOptionPane.showMessageDialog(null, "Database is empty, cannot sort");
            }
            
            ResultSet rs1 = st.executeQuery(sql);
            int count = 0;
            while (rs1.next()) {
                count++;
            }
            
            // initialize an array "rows" of Row data type
            ResultSet rs = st.executeQuery(sql);
            Row[] rows = new Row[count];
            
            int i = 0;
            
            // store each row as an object in rows array
            while (rs.next()) {
                String id  = String.valueOf(rs.getInt(1));
                String fname = rs.getString(2);
                String lname = rs.getString(3);
                String prof = rs.getString(4);
                String age = String.valueOf(rs.getInt(5));
                
                Row rowContent = new Row();
                rowContent.id = Integer.parseInt(id);
                rowContent.fname = fname;
                rowContent.lname = lname;
                rowContent.prof = prof;
                rowContent.age = Integer.parseInt(age);
                
                rows[i] = rowContent;
                i++;
            }
            
            
            switch (comboSort.getSelectedItem().toString()) {
                case ("ID"):
                    idAscendSort(rows);
                    break;
                
                case ("First Name"):
                    fnameAscendSort(rows);
                    break;
                
                case ("Last Name"):
                    lnameAscendSort(rows);
                    break;
                
                case ("Profession"):
                    profAscendSort(rows);
                    break;
                
                case ("Age"):
                    ageAscendSort(rows);
                    break;
                }
            
            con.close();
        }
        catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_btnAscendActionPerformed
    
    // if descend button clicked (for sorting)
    private void btnDescendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescendActionPerformed
        try {
            String databaseURL = "jdbc:derby:winterproject2";
            Connection con = DriverManager.getConnection(databaseURL);
            Statement st = con.createStatement();
            String tableName = labelUser.getText();
            
            String sql = "select * from " + tableName;
            
            ResultSet rs2 = st.executeQuery(sql);
            if (rs2.next() == false) {
                JOptionPane.showMessageDialog(null, "Database is empty, cannot sort");
            }
            
            ResultSet rs1 = st.executeQuery(sql);
            int count = 0;
            while (rs1.next()) {
                count++;
            }
   
            ResultSet rs = st.executeQuery(sql);
            Row[] rows = new Row[count];
            
            int i = 0;
            
            // store each row as an object in rows array
            while (rs.next()) {
                String id  = String.valueOf(rs.getInt(1));
                String fname = rs.getString(2);
                String lname = rs.getString(3);
                String prof = rs.getString(4);
                String age = String.valueOf(rs.getInt(5));
                
                Row rowContent = new Row();
                rowContent.id = Integer.parseInt(id);
                rowContent.fname = fname;
                rowContent.lname = lname;
                rowContent.prof = prof;
                rowContent.age = Integer.parseInt(age);
                
                rows[i] = rowContent;
                i++;
            }
            
            switch (comboSort.getSelectedItem().toString()) {
                case ("ID"):
                    idDescendSort(rows);
                    break;
                
                case ("First Name"):
                    fnameDescendSort(rows);
                    break;
                
                case ("Last Name"):
                    lnameDescendSort(rows);
                    break;
                
                case ("Profession"):
                    profDescendSort(rows);
                    break;
                
                case ("Age"):
                    ageDescendSort(rows);
                    break;
                }
            
            con.close();
        }
        catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_btnDescendActionPerformed
    
    // create class Row with attributes id, fname, lname, prof, and age
    class Row {
        int id;
        String fname;
        String lname; 
        String prof;
        int age;
    }
    
    // sorting algorithms: ascending and descending per category 
    public void idAscendSort(Row rows[]) {
        try 
        {
            DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
            // ascending selection sort 
            for (int i = 0; i < rows.length; i++) {
                for (int j = i+1; j < rows.length; j++) {
                    if (rows[i].id > rows[j].id) {
                        Row temp = rows[i];
                        rows[i] = rows[j];
                        rows[j] = temp;
                    }
                }
            }
            
            // update jtable
            tblModel.setRowCount(0);
            for (int i = 0; i < rows.length; i++) {
                String tbData[] = {String.valueOf(rows[i].id), rows[i].fname, rows[i].lname, rows[i].prof, String.valueOf(rows[i].age)};
                tblModel.addRow(tbData);
            }
            
        }
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }
    
    public void fnameAscendSort(Row rows[]) {
        try 
        {
            DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
            // ascending selection sort 
            for (int i = 0; i < rows.length; i++) {
                for (int j = i+1; j < rows.length; j++) {
                    if (rows[i].fname.compareTo(rows[j].fname) > 0) {
                        Row temp = rows[i];
                        rows[i] = rows[j];
                        rows[j] = temp;
                    }
                }
            }
            
            // uptable jtable
            tblModel.setRowCount(0);
            for (int i = 0; i < rows.length; i++) {
                String tbData[] = {String.valueOf(rows[i].id), rows[i].fname, rows[i].lname, rows[i].prof, String.valueOf(rows[i].age)};
                tblModel.addRow(tbData);
            }
            
        }
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }
    
    public void lnameAscendSort(Row rows[]) {
        try 
        {
            DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
            // ascending selection sort 
            for (int i = 0; i < rows.length; i++) {
                for (int j = i+1; j < rows.length; j++) {
                    if (rows[i].lname.compareTo(rows[j].lname) > 0) {
                        Row temp = rows[i];
                        rows[i] = rows[j];
                        rows[j] = temp;
                    }
                }
            }
            
            // update jtable
            tblModel.setRowCount(0);
            for (int i = 0; i < rows.length; i++) {
                String tbData[] = {String.valueOf(rows[i].id), rows[i].fname, rows[i].lname, rows[i].prof, String.valueOf(rows[i].age)};
                tblModel.addRow(tbData);
            }
            
        }
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }
    
    public void profAscendSort(Row rows[]) {
        try 
        {
            DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
            // ascending selection sort 
            for (int i = 0; i < rows.length; i++) {
                for (int j = i+1; j < rows.length; j++) {
                    if (rows[i].prof.compareTo(rows[j].prof) > 0) {
                        Row temp = rows[i];
                        rows[i] = rows[j];
                        rows[j] = temp;
                    }
                }
            }
            
            // update jtable
            tblModel.setRowCount(0);
            for (int i = 0; i < rows.length; i++) {
                String tbData[] = {String.valueOf(rows[i].id), rows[i].fname, rows[i].lname, rows[i].prof, String.valueOf(rows[i].age)};
                tblModel.addRow(tbData);
            }
            
        }
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }
    
    public void ageAscendSort(Row rows[]) {
        try 
        {
            DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
            // ascending selection sort 
            for (int i = 0; i < rows.length; i++) {
                for (int j = i+1; j < rows.length; j++) {
                    if (rows[i].age > rows[j].age) {
                        Row temp = rows[i];
                        rows[i] = rows[j];
                        rows[j] = temp;
                    }
                }
            }
            
            // update jtable
            tblModel.setRowCount(0);
            for (int i = 0; i < rows.length; i++) {
                String tbData[] = {String.valueOf(rows[i].id), rows[i].fname, rows[i].lname, rows[i].prof, String.valueOf(rows[i].age)};
                tblModel.addRow(tbData);
            }
            
        }
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }
   
    public void idDescendSort(Row rows[]) {
        try 
        {
            DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
            // descending selection sort
            for (int i = 0; i < rows.length; i++) {
                for (int j = i+1; j < rows.length; j++) {
                    if (rows[i].id < rows[j].id) {
                        Row temp = rows[i];
                        rows[i] = rows[j];
                        rows[j] = temp;
                    }
                }
            }
            
            // update jtable
            tblModel.setRowCount(0);
            for (int i = 0; i < rows.length; i++) {
                String tbData[] = {String.valueOf(rows[i].id), rows[i].fname, rows[i].lname, rows[i].prof, String.valueOf(rows[i].age)};
                tblModel.addRow(tbData);
            }
            
        }
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }
    
    public void fnameDescendSort(Row rows[]) {
        try 
        {
            DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
            // ascending selection sort 
            for (int i = 0; i < rows.length; i++) {
                for (int j = i+1; j < rows.length; j++) {
                    if (rows[i].fname.compareTo(rows[j].fname) < 0) {
                        Row temp = rows[i];
                        rows[i] = rows[j];
                        rows[j] = temp;
                    }
                }
            }
            
            // update jtable
            tblModel.setRowCount(0);
            for (int i = 0; i < rows.length; i++) {
                String tbData[] = {String.valueOf(rows[i].id), rows[i].fname, rows[i].lname, rows[i].prof, String.valueOf(rows[i].age)};
                tblModel.addRow(tbData);
            }
            
        }
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }
    
    public void lnameDescendSort(Row rows[]) {
        try 
        {
            DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
            // ascending selection sort 
            for (int i = 0; i < rows.length; i++) {
                for (int j = i+1; j < rows.length; j++) {
                    if (rows[i].lname.compareTo(rows[j].lname) < 0) {
                        Row temp = rows[i];
                        rows[i] = rows[j];
                        rows[j] = temp;
                    }
                }
            }
            
            tblModel.setRowCount(0);
            for (int i = 0; i < rows.length; i++) {
                String tbData[] = {String.valueOf(rows[i].id), rows[i].fname, rows[i].lname, rows[i].prof, String.valueOf(rows[i].age)};
                tblModel.addRow(tbData);
            }
            
        }
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }
    
    public void profDescendSort(Row rows[]) {
        try 
        {
            DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
            // ascending selection sort 
            for (int i = 0; i < rows.length; i++) {
                for (int j = i+1; j < rows.length; j++) {
                    if (rows[i].prof.compareTo(rows[j].prof) < 0) {
                        Row temp = rows[i];
                        rows[i] = rows[j];
                        rows[j] = temp;
                    }
                }
            }
            
            // update jtable
            tblModel.setRowCount(0);
            for (int i = 0; i < rows.length; i++) {
                String tbData[] = {String.valueOf(rows[i].id), rows[i].fname, rows[i].lname, rows[i].prof, String.valueOf(rows[i].age)};
                tblModel.addRow(tbData);
            }
            
        }
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }
    
    public void ageDescendSort(Row rows[]) {
        try 
        {
            DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
            // descending selection sort 
            for (int i = 0; i < rows.length; i++) {
                for (int j = i+1; j < rows.length; j++) {
                    if (rows[i].age < rows[j].age) {
                        Row temp = rows[i];
                        rows[i] = rows[j];
                        rows[j] = temp;
                    }
                }
            }
            
            // update jtable
            
            tblModel.setRowCount(0);
            for (int i = 0; i < rows.length; i++) {
                String tbData[] = {String.valueOf(rows[i].id), rows[i].fname, rows[i].lname, rows[i].prof, String.valueOf(rows[i].age)};
                tblModel.addRow(tbData);
            }
            
        }
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }
    
    // ADD FUNCTION (OPENS NEW JFRAME)
    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        this.dispose();
        new AddPage(labelUser.getText()).setVisible(true);
    }//GEN-LAST:event_btnAddNewActionPerformed
    // DELETE FUNCTION
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try 
        {
            String tableName = labelUser.getText();
            
            DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
            int r = homeTable.getSelectedRow();
            
            if (r==-1) {
                JOptionPane.showMessageDialog(null, "Please select a row to delete");
            
            } else {
                
                int p = JOptionPane.showConfirmDialog(null, "Do you really want to delete this item?", "Delete", JOptionPane.YES_NO_OPTION);
                if (p==0) {
                    // getValueAt(col, row) to set-up values for deletion
                    int idRow = Integer.parseInt(tblModel.getValueAt(r, 0).toString());
                    String fnameRow = tblModel.getValueAt(r, 1).toString();
                    String lnameRow = tblModel.getValueAt(r, 2).toString();
                    String profRow = tblModel.getValueAt(r, 3).toString();
                    int ageRow = Integer.parseInt(tblModel.getValueAt(r, 4).toString());
                
                    String databaseURL = "jdbc:derby:winterproject2";
                    Connection con = DriverManager.getConnection(databaseURL);
                    Statement st = con.createStatement();
                
                    // deleting from the database
                    String sql = " delete from " + tableName + " where id="+idRow+" and firstname='"+fnameRow+"' and lastname='"+lnameRow+"' and prof='"+profRow+"' and age="+ageRow+" ";
                    st.executeUpdate(sql);
                    
                    con.close();
                
                    updateJTable();
                }
            }
        }
        catch (Exception e)
        {
            System.out.println(e);
        }        
    }//GEN-LAST:event_btnDeleteActionPerformed
    
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        this.dispose();
        new LoginPage().setVisible(true);
    }//GEN-LAST:event_btnLogoutActionPerformed
    
    // UPDATE FUNCTION (OPENS NEW JFRAME)
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String tableName = labelUser.getText();
        
        this.dispose();
        new UpdatePage(tableName).setVisible(true);
    }//GEN-LAST:event_btnUpdateActionPerformed
    
    // SEARCH FUNCTION
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            
            String databaseURL = "jdbc:derby:winterproject2";
            Connection con = DriverManager.getConnection(databaseURL);
            Statement st = con.createStatement();
            String tableName = labelUser.getText();
            
            String sql = "select * from " + tableName;
            
            ResultSet rs2 = st.executeQuery(sql);
            if (rs2.next() == false) {
                JOptionPane.showMessageDialog(null, "Database is empty, cannot search");
            } else {
                    // finds length needed for array of row objects
                ResultSet rs1 = st.executeQuery(sql);
                int count = 0;
                while (rs1.next()) {
                    count++;
                }

                ResultSet rs = st.executeQuery(sql);
                Row[] rows = new Row[count];

                int i = 0;

                // linear search
                while (rs.next()) {
                    String id  = String.valueOf(rs.getInt(1));
                    String fname = rs.getString(2);
                    String lname = rs.getString(3);
                    String prof = rs.getString(4);
                    String age = String.valueOf(rs.getInt(5));

                    Row rowContent = new Row();
                    rowContent.id = Integer.parseInt(id);
                    rowContent.fname = fname;
                    rowContent.lname = lname;
                    rowContent.prof = prof;
                    rowContent.age = Integer.parseInt(age);

                    rows[i] = rowContent;
                    i++;
                }
                
                // switch case for combo box option to search by
                switch (comboSearch.getSelectedItem().toString()) {
                    case ("ID"):
                        if (validIntInput(txtSearch.getText())) {
                            idSearch(rows);
                        } else {
                            JOptionPane.showMessageDialog(null, "Input a valid ID");
                            txtSearch.setText("");
                        }
                        break;

                    case ("First Name"):
                        fnameSearch(rows);
                        break;

                    case ("Last Name"):
                        lnameSearch(rows);
                        break;

                    case ("Profession"):
                        if (validStringInput(txtSearch.getText())) {
                            profSearch(rows);
                        } else {
                            JOptionPane.showMessageDialog(null, "Input a valid profession");
                            txtSearch.setText("");
                        }
                        break;

                    case ("Age"):
                        if (validIntInput(txtSearch.getText())) {
                            ageSearch(rows);
                        } else {
                            JOptionPane.showMessageDialog(null, "Input a valid age");
                            txtSearch.setText("");
                        }
                        break;
                    }
            }
            con.close();
        }
        catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    public void idSearch(Row rows[]) {
    try
    {
        DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
        
        int count = 0;
        
        // find length needed for new array of objects 
        for (int i = 0; i < rows.length; i++) {
            if (txtSearch.getText().equals(String.valueOf(rows[i].id))) {
                count++;
            }
        }
        
        Row rows1[] = new Row[count];
        
        // add searched elements to a new array
        
        int j = 0;
        for (int i = 0; i < rows.length; i++) {
            if (txtSearch.getText().equals(String.valueOf(rows[i].id))) {
                rows1[j] = rows[i];
                j++;
            }
        }
        
        tblModel.setRowCount(0);
        
        if (rows1.length == 0) {
            JOptionPane.showMessageDialog(null, "ID not found");
        } else {
            for (int i = 0; i < rows1.length; i++) {
                String tbData[] = {String.valueOf(rows1[i].id), rows1[i].fname, rows1[i].lname, rows1[i].prof, String.valueOf(rows1[i].age)};
                tblModel.addRow(tbData);
            }
        }
        
    }
    catch (Exception e) 
    {
        System.out.println(e);
    }
    
    }
    
    public void fnameSearch(Row rows[]) {
    try
    {
        DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
        
        int count = 0;
        
        for (int i = 0; i < rows.length; i++) {
            if (txtSearch.getText().toLowerCase().equals(rows[i].fname.toLowerCase())) {
                count++;
            }
        }
        
        Row rows1[] = new Row[count];
        
        
        // add searched elements to a new array
        
        int j = 0;
        for (int i = 0; i < rows.length; i++) {
            if (txtSearch.getText().toLowerCase().equals(rows[i].fname.toLowerCase())) {
                rows1[j] = rows[i];
                j++;
            }
        }
        
        tblModel.setRowCount(0);
        if (rows1.length == 0) {
            JOptionPane.showMessageDialog(null, "First Name not found");
        } else {
            for (int i = 0; i < rows1.length; i++) {
                String tbData[] = {String.valueOf(rows1[i].id), rows1[i].fname, rows1[i].lname, rows1[i].prof, String.valueOf(rows1[i].age)};
                tblModel.addRow(tbData);
            }
        }
    }
    catch (Exception e) 
    {
        System.out.println(e);
    }
    
    }
    
    public void lnameSearch(Row rows[]) {
    try
    {
        DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
        
        int count = 0;
        
        for (int i = 0; i < rows.length; i++) {
            if (txtSearch.getText().toLowerCase().equals(rows[i].lname.toLowerCase())) {
                count++;
            }
        }
        
        Row rows1[] = new Row[count];
        
        
        // add searched elements to a new array
        
        int j = 0;
        for (int i = 0; i < rows.length; i++) {
            if (txtSearch.getText().toLowerCase().equals(rows[i].lname.toLowerCase())) {
                rows1[j] = rows[i];
                j++;
            }
        }
        
        tblModel.setRowCount(0);
        if (rows1.length == 0) {
            JOptionPane.showMessageDialog(null, "Last Name not found");
        } else {
            for (int i = 0; i < rows1.length; i++) {
                String tbData[] = {String.valueOf(rows1[i].id), rows1[i].fname, rows1[i].lname, rows1[i].prof, String.valueOf(rows1[i].age)};
                tblModel.addRow(tbData);
            }
        }
        
    }
    catch (Exception e) 
    {
        System.out.println(e);
    }
        
    }
    
    public void profSearch(Row rows[]) {
    try
    {
        DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
        
        int count = 0;
        
        for (int i = 0; i < rows.length; i++) {
            if (txtSearch.getText().toLowerCase().equals(rows[i].prof.toLowerCase())) {
                count++;
            }
        }
        
        Row rows1[] = new Row[count];
        
        // add searched elements to a new array
        
        int j = 0;
        for (int i = 0; i < rows.length; i++) {
            if (txtSearch.getText().toLowerCase().equals(rows[i].prof.toLowerCase())) {
                rows1[j] = rows[i];
                j++;
            }
        }
        
        tblModel.setRowCount(0);
        if (rows1.length == 0) {
            JOptionPane.showMessageDialog(null, "Profession not found");
        } else {
            for (int i = 0; i < rows1.length; i++) {
                String tbData[] = {String.valueOf(rows1[i].id), rows1[i].fname, rows1[i].lname, rows1[i].prof, String.valueOf(rows1[i].age)};
                tblModel.addRow(tbData);
            }
        }
        
    }
    catch (Exception e) 
    {
        System.out.println(e);
    }
        
    }
    
    public void ageSearch(Row rows[]) {
    try
        {
        DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
        
        int count = 0;
        
        // find length needed for new array of objects 
        for (int i = 0; i < rows.length; i++) {
            if (txtSearch.getText().equals(String.valueOf(rows[i].age))) {
                count++;
            }
        }
        
        Row rows1[] = new Row[count];
        
        // add searched elements to a new array
        
        int j = 0;
        for (int i = 0; i < rows.length; i++) {
            if (txtSearch.getText().equals(String.valueOf(rows[i].age))) {
                rows1[j] = rows[i];
                j++;
            }
        }
        
        tblModel.setRowCount(0);
        if (rows1.length == 0) {
            JOptionPane.showMessageDialog(null, "Age not found");
        } else {
            for (int i = 0; i < rows1.length; i++) {
                String tbData[] = {String.valueOf(rows1[i].id), rows1[i].fname, rows1[i].lname, rows1[i].prof, String.valueOf(rows1[i].age)};
                tblModel.addRow(tbData);
            }
        }
        
    }
    catch (Exception e) 
    {
        System.out.println(e);
    }
    
    }
    
    
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        txtSearch.setText("");
        
        updateJTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed
        try 
        {
            String tableName = labelUser.getText();
            
            String databaseURL = "jdbc:derby:winterproject2";
            Connection con = DriverManager.getConnection(databaseURL);
            Statement st = con.createStatement();
            
            String sql1 = "select * from " + tableName;
            ResultSet rs = st.executeQuery(sql1);
            if (rs.next() == false) {
                JOptionPane.showMessageDialog(null, "Database is empty, cannot delete");
            } else {
                int p = JOptionPane.showConfirmDialog(null, "Do you really want to delete all items in the database?", "Delete All", JOptionPane.YES_NO_OPTION);
                if (p==0) {
                    st = con.createStatement();
                    
                    // deleting from the database
                    String sql = "delete from " + tableName;
                    st.executeUpdate(sql);

                    con.close();
                
                    updateJTable();
                }
            }  
            
        }
        catch (Exception e)
        {
            System.out.println(e);
        }        
    }//GEN-LAST:event_btnDeleteAllActionPerformed


    // checks if the input for age and ID are integers (for searching)
    public static boolean validIntInput(String str)
    {
        for (int i = 0; i < str.length(); i++) {
 
            // Check if character is
            // not a digit between 0-9
            // then return false
            if (str.charAt(i) < '0'
                || str.charAt(i) > '9') {
                return false;
            }
        }
        return true;
    }
    
    // checks if the input for profession is a valid string 
    public static boolean validStringInput(String str)
    {
 
        // If string is empty or null
        if (str == null || str.equals("")) {
 
            // Return false
            return false;
        }
 
        // If we reach here we have character/s in string
        for (int i = 0; i < str.length(); i++) {
 
            char ch = str.charAt(i);
            if ((!(ch >= 'A' && ch <= 'Z'))
                && (!(ch >= 'a' && ch <= 'z'))) {
                return false;
            }
        }
 
        // String is only alphabetic
        return true;
    }
    
    // call updateJTable to reload the JTable after action to database has been performed
    public void updateJTable() {
        
        try {
            String tableName = labelUser.getText();
            
            DefaultTableModel tblModel = (DefaultTableModel)homeTable.getModel();
        
            String databaseURL = "jdbc:derby:winterproject2";
            Connection con1 = DriverManager.getConnection(databaseURL);
            Statement st = con1.createStatement();
        
            String sql1 = "select * from" + " " + tableName;
            ResultSet rs = st.executeQuery(sql1);
            tblModel.setRowCount(0);
                
            while (rs.next()==true) {
                String id  = String.valueOf(rs.getInt(1));
                String fname = rs.getString(2);
                String lname = rs.getString(3);
                String prof = rs.getString(4);
                String age = String.valueOf(rs.getInt(5));
                
                String tbData[] = {id, fname, lname, prof, age};
                
                tblModel.addRow(tbData);
            }

        } 
        catch (Exception e) {
            System.out.println(e);
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnAscend;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JButton btnDescend;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboSearch;
    private javax.swing.JComboBox<String> comboSort;
    private javax.swing.JTable homeTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelUser;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
